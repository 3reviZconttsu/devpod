name: Publish Desktop
on: workflow_dispatch

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result.id }}
      upload_url: ${{ steps.create-release.outputs.result.upload_url }}
      package_version: ${{ steps.get-version.outputs.package_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get Version
        id: get-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./desktop/package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `DevPod-v${process.env.PACKAGE_VERSION}`,
              name: `DevPod v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install DevPod Desktop',
              draft: true,
              prerelease: false
            })
            console.log(data)
            return data

      - name: check return value
        run: |
          echo ${{ steps.create-release.outputs }}  
            
  test-step: 
    needs: create-release
    permissions: 
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Check output
        env: 
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          UPLOAD_URL: ${{ needs.create-release.outputs.upload_url }}
          PACKAGE_VERSION: ${{ needs.create-release.outputs.package_version }}
        run: |
          echo release id: "$RELEASE_ID"
          echo upload url: "$UPLOAD_URL"
          echo package version: "$PACKAGE_VERSION"

  build-app:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   os: darwin
          #   arch: amd64
          # - host: macos-latest
          #   target: aarch64-apple-darwin
          #   os: darwin
          #   arch: arm64
          # The WIX version we use for the installer (latest 3.something) doesn't support arm builds - if we need to support arm windows,
          # we'd need to switch the installer toolchain to WIX 4.xx, not sure how that works out with tauri
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   arch: arm64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            arch: amd64
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   os: linux
          #   arch: amd64
    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    env:
      GO111MODULE: on
      GOFLAGS: -mod=vendor

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup System Dependencies
        if: matrix.settings.host == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./desktop/src-tauri -> target"

      - name: Go setup
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Build Sidecar CLI
        if: matrix.settings.host != 'windows-latest'
        run: |
          BIN_NAME=devpod-cli-${{ matrix.settings.target }}
          GOOS=${{ matrix.settings.os }} GOARCH=${{ matrix.settings.arch }} go build -ldflags "-s -w" -o "test/$BIN_NAME"
          cp "test/$BIN_NAME" "desktop/src-tauri/bin/$BIN_NAME"
          ls desktop/src-tauri/bin

      - name: Build Sidecar CLI
        if: matrix.settings.host == 'windows-latest'
        shell: cmd
        run: |
          set GOOS=windows
          set GOARCH=${{ matrix.settings.arch }}
          set BIN_NAME=devpod-cli-${{ matrix.settings.target }}.exe

          go build -ldflags "-s -w" -o "test/%BIN_NAME%"

          xcopy /F /Y "test\%BIN_NAME%" desktop\src-tauri\bin\*

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "yarn"
          cache-dependency-path: "./desktop/yarn.lock"

      - name: Install frontend dependencies
        run: yarn install
        working-directory: "./desktop"

      - name: Build Desktop App
        if: matrix.settings.host != 'windows-latest'
        uses: tauri-apps/tauri-action@dev
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          projectPath: "./desktop"
          args: " --target ${{ matrix.settings.target }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # MacOS Signing:
          # ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          #
          # AppImage Signing:
          SIGN: ${{ secrets.APP_IMAGE_SIGN }}
          SIGN_KEY: ${{ secrets.APP_IMAGE_SIGN_KEY }}
          APPIMAGETOOL_SIGN_PASSPHRASE: ${{ secrets.APP_IMAGE_SIGN_PASSPHRASE }}

      - name: Build Desktop App
        if: matrix.settings.host == 'windows-latest'
        id: build-desktop-app
        uses: tauri-apps/tauri-action@dev
        with:
          projectPath: "./desktop"
          args: " --target ${{ matrix.settings.target }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Need to sign application after building it
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./desktop/src-tauri/target/release/bundle/msi/DevPod-${{ needs.create-release.outputs.package_version }}_x64_en-US.msi
          asset_name: DevPod-${{ needs.create-release.outputs.package_version }}_x64_en-US.msi
          asset_content_type: application/x-msi
